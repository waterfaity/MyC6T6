/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

#include <stdio.h>
#include "stm32f1xx_hal_uart.h"

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

struct  Rx_Type {
    uint8_t rData[100];
    uint8_t rDataBuffer;
    uint8_t rDataCount ;
    uint8_t rDataFlag ;
    uint8_t type;
} rx_type1,rx_type2 ;

void rx_handle(UART_HandleTypeDef  *huart, struct Rx_Type rx_type) {


    uint8_t index=0;
    for(;;) {
        if(index>10) {
            break;
        }
        printf("\ndata:%d  %p  %d",rx_type.rDataBuffer,(&rx_type.rDataBuffer+index),*((&rx_type.rDataBuffer+index)));

        index++;
    }

    HAL_UART_Receive_IT(huart, &rx_type.rDataBuffer, 1);

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)

{
//    printf("\ndata:%d  %p  %d",rx_type2.rDataBuffer,(&rx_type2.rDataBuffer+0),*((&rx_type2.rDataBuffer+0)));


	
	huart->RxXferCount;
	
	printf("count:%d , %d  ,%p",huart->RxXferCount,huart->RxXferSize,);

	 uint8_t index=0;
    for(;;) {
        if(index>10) {
            break;
        }
        printf("\ndata:%d  %p  %d",rx_type2.rDataBuffer,(&rx_type2.rDataBuffer+index), *(&(huart->pRxBuffPtr)+index) );

        index++;
    }

    HAL_UART_Receive_IT(huart, &rx_type2.rDataBuffer, 10);
//    if(huart->Instance == USART2 )
//    {
//        rx_handle(&huart2,rx_type2);
//    } else if(huart->Instance == USART1)
//    {
//        rx_handle(&huart1,rx_type1);
//    }
}

void receive_it(struct Rx_Type rx_type) {
    HAL_StatusTypeDef status_type;
    if(rx_type.type==1) {
        status_type= HAL_UART_Receive_IT(&huart1,&rx_type.rDataBuffer,10);
    } else if(rx_type.type == 2) {
        status_type= HAL_UART_Receive_IT(&huart2,&rx_type.rDataBuffer,10);
    }

//    for( int i =0; i< 100; i++)
//    {
//        rx_type.rData[i]=0;
//    }
//    printf("\n -- > uart%d : wait",rx_type.type);
}



/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
    /* USER CODE BEGIN 1 */

    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();

    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();

    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
    MX_USART1_UART_Init();
    MX_TIM1_Init();
    MX_USART2_UART_Init();
    /* USER CODE BEGIN 2 */

    HAL_TIM_Base_Start_IT(&htim1);


    HAL_Delay(500);
    printf("\n - - hello world ! - -");

    rx_type1.type = 1;
    rx_type2.type = 2;
//    receive_it(rx_type1);
    receive_it(rx_type2);
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */

    while (1)
    {
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */


        HAL_Delay(1000);
    }
    /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
    {
        Error_Handler();
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                                  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
    {
        Error_Handler();
    }
}

/* USER CODE BEGIN 4 */


/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
    {
    }
    /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
    /* USER CODE BEGIN 6 */
    /* User can add his own implementation to report the file name and line number,
       ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
